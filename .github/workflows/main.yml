name: Deploy to Render

on: [push]

permissions:
  deployments: write  # Grant write access to deployments

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
       # To report GitHub Actions status checks
      statuses: write
      
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Super Linter
        uses: super-linter/super-linter@v7.2.1
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FIX_JAVASCRIPT_ES: true
          FIX_JAVASCRIPT_PRETTIER: true
          FIX_YAML_PRETTIER: true
          FIX_CSS: true
          FIX_CSS_PRETTIER: true
          VALIDATE_CHECKOV: false
          VALIDATE_JAVASCRIPT_STANDARD: false
          
      # Step 3: Create GitHub Deployment
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            console.log("Creating deployment...");
            try {
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.ref,
                task: 'deploy',
                environment: 'Production',
                description: 'Deploying to Render',
                required_contexts: [],
                auto_merge: false
              });
              console.log("Deployment created successfully:", deployment);
              core.setOutput('deployment_id', deployment.data.id);
            } catch (error) {
              console.error("Error creating deployment:", error);
              core.setFailed(error.message); 
            }

      # Step 4: Trigger Render Deploy Hook
      - name: Trigger Render Deploy Hook
        run: curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"

      # Step 5: Update GitHub Deployment Status
      - name: Update GitHub Deployment Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const deploymentId = ${{ steps.create_deployment.outputs.deployment_id }};
            console.log("Deployment ID:", deploymentId); 
            if (deploymentId) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId, 
                state: 'success',
                environment: 'Production',
                environment_url: 'https://nodewikipedia.onrender.com',
                description: 'Render deployment successful!'
              });
            } else {
              console.error("Deployment ID is not set. Skipping status update.");
            }
